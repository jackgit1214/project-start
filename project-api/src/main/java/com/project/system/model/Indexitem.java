package com.project.system.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.project.core.mybatis.model.BaseModel;
import lombok.*;
import org.springframework.util.StringUtils;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * 系统指标表，定义系统数据指标
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
@JsonIgnoreProperties(value = {"handler"})
@ToString
public class Indexitem extends BaseModel implements Serializable {

    /**
     * 指标ID
     *
     */
    private String indexid;

    /**
     * id
     *
     */
    private String id;

    /**
     * 指标名称
     *
     */
    private String indexname;

    /**
     * 指标数据类型
     *
     */
    private String idatatype;

    /**
     * 是否可选择
     *
     */
    private String iseltype;

    /**
     * 结束标志
     *
     */
    private String endflag;

    /**
     * 上级指标ID
     *
     */
    private String superid;

    /**
     * 排序ID，由用户维护的、用于控制指标显示顺序的字母、数字组成的字符串，不能重复。
     *
     */
    private String sortid;

    /**
     * 取值为：1:是单级结构，2:非单级结构。表示是否可以在第一级结点下继续增加下级结点，若取值为'1'，则不能在该结点下继续增加下级结点（执行增加下级结点操作时将提示错误信息）。若取值为'2'，则可以在该结点下继续增加下级结点（但对于从第二级结点开始的各级下级结点，不提供设置"是否单级结构代码"的操作选项）。
     *
     */
    private String isSingleLevel;

    /**
     * 是否是核心指标
     *
     */
    private String iscore;

    /**
     * 是否必填
     *
     */
    private String isrequired;

    /**
     * 宽度
     *
     */
    private Integer indexwidth;

    /**
     * 验证格式
     *
     */
    private String dataformat;

    /**
     * 摘要
     *
     */
    private String breviary;

    /**
     * remark
     *
     */
    private String remark;

    private Indexitem superIndex;
    private Set<Indexitem> children;

    /**
     */
    private static final long serialVersionUID = 1L;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_indexitem
     */
    @Override
    public Object getPrimaryKey() {
        Map<String,String> primaryKey = new HashMap<>();
         primaryKey.put("indexid",this.getIndexid());
         primaryKey.put("id",this.getId());
        if (!StringUtils.hasLength(this.getIndexid()) ||!StringUtils.hasLength(this.getId()) ) return null;
        return primaryKey;
    }
}